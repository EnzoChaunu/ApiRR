// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RRelationnelle;

#nullable disable

namespace Commun.Migrations
{
    [DbContext(typeof(RrelationnelApiContext))]
    [Migration("20230502205526_initialcreate")]
    partial class initialcreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RRelationnelle.Category", b =>
                {
                    b.Property<int>("Id_Category")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Category"));

                    b.Property<int?>("Id_User")
                        .HasColumnType("int");

                    b.Property<DateTime>("_creationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id_Category");

                    b.HasIndex("Id_User");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("RRelationnelle.Comment", b =>
                {
                    b.Property<int>("id_comments")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_comments"));

                    b.Property<int?>("ID_Ressource")
                        .HasColumnType("int");

                    b.Property<int?>("Id_User")
                        .HasColumnType("int");

                    b.Property<bool>("activation")
                        .HasColumnType("bit");

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("creationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("dislikes")
                        .HasColumnType("int");

                    b.Property<int>("likes")
                        .HasColumnType("int");

                    b.Property<bool>("modified")
                        .HasColumnType("bit");

                    b.HasKey("id_comments");

                    b.HasIndex("ID_Ressource");

                    b.HasIndex("Id_User");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("RRelationnelle.Models.UserFavorite", b =>
                {
                    b.Property<int>("IdUserFav")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUserFav"));

                    b.Property<int>("ID_Ressource")
                        .HasColumnType("int");

                    b.Property<int>("Id_User")
                        .HasColumnType("int");

                    b.HasKey("IdUserFav");

                    b.HasIndex("ID_Ressource");

                    b.HasIndex("Id_User");

                    b.ToTable("UserFavorite");
                });

            modelBuilder.Entity("RRelationnelle.Ressource", b =>
                {
                    b.Property<int>("ID_Ressource")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Ressource"));

                    b.Property<int?>("Id_Category")
                        .HasColumnType("int");

                    b.Property<int?>("Id_User")
                        .HasColumnType("int");

                    b.Property<bool>("_activation")
                        .HasColumnType("bit");

                    b.Property<DateTime>("_creationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("_reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("_shared")
                        .HasColumnType("int");

                    b.Property<string>("_title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("_views")
                        .HasColumnType("int");

                    b.HasKey("ID_Ressource");

                    b.HasIndex("Id_Category");

                    b.HasIndex("Id_User");

                    b.ToTable("Ressource");
                });

            modelBuilder.Entity("RRelationnelle.Roles", b =>
                {
                    b.Property<int>("id_role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_role"));

                    b.Property<bool>("Activated")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_role");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("RRelationnelle.Stats", b =>
                {
                    b.Property<int>("id_stat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_stat"));

                    b.Property<int>("AcountCreated")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateStat")
                        .HasColumnType("datetime2");

                    b.Property<int>("commentposted")
                        .HasColumnType("int");

                    b.Property<int>("visits")
                        .HasColumnType("int");

                    b.HasKey("id_stat");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("RRelationnelle.User", b =>
                {
                    b.Property<int>("Id_User")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_User"));

                    b.Property<bool>("Activation")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("id_role")
                        .HasColumnType("int");

                    b.HasKey("Id_User");

                    b.HasIndex("id_role");

                    b.ToTable("User");
                });

            modelBuilder.Entity("RRelationnelle.Category", b =>
                {
                    b.HasOne("RRelationnelle.User", "Creator")
                        .WithMany()
                        .HasForeignKey("Id_User");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("RRelationnelle.Comment", b =>
                {
                    b.HasOne("RRelationnelle.Ressource", "id_ressource")
                        .WithMany()
                        .HasForeignKey("ID_Ressource");

                    b.HasOne("RRelationnelle.User", "id_user")
                        .WithMany()
                        .HasForeignKey("Id_User");

                    b.Navigation("id_ressource");

                    b.Navigation("id_user");
                });

            modelBuilder.Entity("RRelationnelle.Models.UserFavorite", b =>
                {
                    b.HasOne("RRelationnelle.Ressource", "ressource")
                        .WithMany()
                        .HasForeignKey("ID_Ressource")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RRelationnelle.User", "user")
                        .WithMany()
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ressource");

                    b.Navigation("user");
                });

            modelBuilder.Entity("RRelationnelle.Ressource", b =>
                {
                    b.HasOne("RRelationnelle.Category", "category")
                        .WithMany()
                        .HasForeignKey("Id_Category");

                    b.HasOne("RRelationnelle.User", "modification")
                        .WithMany()
                        .HasForeignKey("Id_User");

                    b.Navigation("category");

                    b.Navigation("modification");
                });

            modelBuilder.Entity("RRelationnelle.User", b =>
                {
                    b.HasOne("RRelationnelle.Roles", "Role")
                        .WithMany()
                        .HasForeignKey("id_role");

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
